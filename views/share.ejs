<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>J00% - Share</title>
    <link rel="stylesheet" href="/css/base.css">
    <link rel="stylesheet" href="/css/share.css">
</head>
<body>
    <div id="wrap">
    <header id="main-header">
        <a href="/">
            <img src="/images/logo.svg" alt="logo" class="logo">
        </a>
        <button id="nav-toggle" class="nav-toggle">
            <span class="nav-icon"></span>
            <span class="nav-icon"></span>
            <span class="nav-icon"></span>
        </button>
        <nav id="main-navigation">
            <ul class="menu">
                <li class="menu-item"><button onclick="window.location.href='/mandalart'" class="nav-button">My Mandalart</button></li>
                <li class="menu-item"><button onclick="window.location.href='/share'" class="nav-button active">Share</button></li>
                <li class="menu-item"><button onclick="window.location.href='/calendar'" class="nav-button">Calendar</button></li>
                <li class="menu-item"><button onclick="window.location.href='/profile'" class="nav-button">Profile</button></li>
            </ul>
        </nav>
    </header>

    <div id="page-wrapper">
        <div id="share">
            <main>
                <h1><a href="/add_friend">친구 추가하기 +</a></h1>
                <div class="tabs">
                    <button id="following-tab" class="active" onclick="showTab('following')">팔로잉 (<span id="following-count">0</span>)</button>
                    <button id="followers-tab" onclick="showTab('followers')">팔로워 (<span id="followers-count">0</span>)</button>
                </div>
                <div id="following" class="tab-content active">
                    <div class="user-list" id="following-list">
                        <!-- 팔로잉 목록 -->
                    </div>
                    <div id="following-page-info" style="display: none;"></div>
                    <div class="page-navigation" id="following-page-navigation" style="display: none;">
                        <button id="following-prev" onclick="changeFollowingPage(-1)">Previous</button>
                        <button id ="following-next" onclick="changeFollowingPage(1)">Next</button>
                    </div>
                </div>
                <div id="followers" class="tab-content">
                    <div class="user-list" id="followers-list">
                        <!-- 팔로워 목록 -->
                    </div>
                    <div id="followers-page-info" style="display: none;"></div>
                    <div class="page-navigation" id="followers-page-navigation" style="display: none;">
                        <button id="followers-prev" onclick="changeFollowersPage(-1)">Previous</button>
                        <button id="followers-next" onclick="changeFollowersPage(1)">Next</button>
                    </div>
                </div>
            </main>
        </div>
    </div>
    </div>


    <footer>
        <p>
            <img src="/images/pc-footer.png" alt="footer-pc-logo" class="footer-pc-logo"><br/>
            <span class="dev">Developer</span>
            <span class="dev-name">강다인   김현수   송혜음   이예령   전소현   한세나</span><br/>
            <span class="copyright">Copyright 2024 SECRETJOOJOO All rights reserved.</span>
        </p>
    </footer>

    <script>
        // 모바일 네비바
        document.addEventListener('DOMContentLoaded', () => {
            const navToggle = document.getElementById('nav-toggle');
            const mainNav = document.getElementById('main-navigation');
            const mainHeader = document.getElementById('main-header');

            navToggle.addEventListener('click', () => {
                mainNav.classList.toggle('active');
                mainHeader.classList.toggle('active-header');
            });
        });

        // 친구
        let followingPage = 1;
        let followersPage = 1;

        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const userId = await getCurrentUserId();

                // 전체 팔로잉 수 업데이트
                const totalFollowingCount = await fetchFollowingCount(userId);
                document.getElementById('following-count').textContent = totalFollowingCount;

                // 전체 팔로워 수 업데이트
                const totalFollowersCount = await fetchFollowersCount(userId);
                document.getElementById('followers-count').textContent = totalFollowersCount;

                // 첫 번째 페이지의 리스트를 가져옴
                await showFollowingList(userId, followingPage);
                await showFollowersList(userId, followersPage);

                // 팔로잉 수가 11 이상이면 페이지네이션 보이기
                if (totalFollowingCount >= 11) {
                    const followingPageNavigation = document.getElementById('following-page-navigation');
                    followingPageNavigation.style.display = 'block';
                    const followingPageInfo = document.getElementById('following-page-info');
                    followingPageInfo.style.display = 'block';
                }

                // 팔로워 수가 11 이상이면 페이지네이션 보이기
                if (totalFollowersCount >= 11) {
                    const followersPageNavigation = document.getElementById('followers-page-navigation');
                    followersPageNavigation.style.display = 'block';
                    const followersPageInfo = document.getElementById('followers-page-info');
                    followersPageInfo.style.display = 'block';
                }
            } catch (error) {
                console.error('Error initializing page:', error.message);
            }
        });

        async function getCurrentUserId() {
            try {
                const response = await fetch('/api/share/currentUserId');
                if (!response.ok) {
                    throw new Error('Failed to get current user ID');
                }
                const data = await response.json();
                return data.user_id;
            } catch (error) {
                console.error('Error fetching current user ID:', error.message);
                throw error;
            }
        }

        async function fetchFollowingCount(userId) {
            try {
                const response = await fetch(`/api/share/followingCount?userId=${userId}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch following count');
                }
                const data = await response.json();
                return data.totalFollowing;
            } catch (error) {
                console.error('Error fetching following count:', error.message);
                return 0;
            }
        }

        async function fetchFollowersCount(userId) {
            try {
                const response = await fetch(`/api/share/followersCount?userId=${userId}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch followers count');
                }
                const data = await response.json();
                return data.totalFollowers;
            } catch (error) {
                console.error('Error fetching followers count:', error.message);
                return 0;
            }
        }

        async function fetchFollowingList(userId, page) {
            try {
                const response = await fetch(`/api/share/followingList?userId=${userId}&page=${page}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch following list');
                }
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error fetching following list:', error.message);
                return { followingList: [], totalPages: 1 };
            }
        }

        async function fetchFollowersList(userId, page) {
            try {
                const response = await fetch(`/api/share/followersList?userId=${userId}&page=${page}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch followers list');
                }
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error fetching followers list:', error.message);
                return { followersList: [], totalPages: 1 };
            }
        }

        async function showFollowingList(userId, page = 1) {
            const { followingList, totalPages } = await fetchFollowingList(userId, page);
            const followingListContainer = document.getElementById('following-list');
            const followingPageInfo = document.getElementById('following-page-info');
            followingListContainer.innerHTML = ''; 

            followingList.forEach(user => {
                const userItem = document.createElement('div');
                userItem.className = 'user-item';

                const userPlan = document.createElement('span');
                userPlan.className = 'user-plan';
                userPlan.textContent = user;

                userPlan.addEventListener('click', async () => {
                    console.log(user); // 사용자 아이디를 콘솔에 출력

                    const mutualFollow = await checkMutualFollow(userId, user);
                    if (mutualFollow) {
                        window.location.href = `/share_viewMandalart?userId=${user}`;
                    } else {
                        alert('서로 팔로잉한 상태에서만 만다라트를 열람할 수 있어요 :( ');
                    }
                });
                
                //이 부분
                const clickButton = document.createElement('button');
                clickButton.className = 'click-button';
                clickButton.textContent = '응원하기';
                clickButton.addEventListener('click', async () => {
                    await cheerUser(userId, user);
                });
                
                const cancelButton = document.createElement('button');
                cancelButton.className = 'cancel-button';
                cancelButton.textContent = '삭제하기';
                cancelButton.addEventListener('click', async () => {
                    await deleteFollowing(user);
                    await showFollowingList(userId, followingPage);
                });

                userItem.appendChild(userPlan);
                userItem.appendChild(clickButton);
                userItem.appendChild(cancelButton);

                followingListContainer.appendChild(userItem);
            });

            followingPageInfo.textContent = `페이지 ${page} / ${totalPages}`;
            document.getElementById('following-prev').disabled = page <= 1;
            document.getElementById('following-next').disabled = page >= totalPages;
        }
        
        async function cheerUser(fromUserId, toUserId) {
            try {
                const response = await fetch('/api/share/cheer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ to_user_id: toUserId }),
                });
        
                if (!response.ok) {
                    const data = await response.json();
                    throw new Error(data.msg || 'Failed to cheer user');
                }
        
                const data = await response.json();
                alert(`${toUserId}님을 응원했습니다!`);
            } catch (error) {
                console.error('Error cheering user:', error.message);
                alert(error.message);
            }
        }
        

        async function showFollowersList(userId, page = 1) {
            const { followersList, totalPages } = await fetchFollowersList(userId, page);
            const followersListContainer = document.getElementById('followers-list');
            const followersPageInfo = document.getElementById('followers-page-info');
            followersListContainer.innerHTML = '';

            followersList.forEach(user => {
                const userItem = document.createElement('div');
                userItem.className = 'user-item';

                const userPlan = document.createElement('span');
                userPlan.className = 'user-plan';
                userPlan.textContent = user;
                userItem.appendChild(userPlan);

                const cancelButton = document.createElement('button');
                cancelButton.className = 'cancel-button';
                cancelButton.textContent = '삭제하기';
                cancelButton.addEventListener('click', async () => {
                    await deleteFollower(user);
                    await showFollowersList(userId, followersPage);
                });
                userItem.appendChild(cancelButton);

                followersListContainer.appendChild(userItem);
            });

            followersPageInfo.textContent = `페이지 ${page} / ${totalPages}`;
            document.getElementById('followers-prev').disabled = page <= 1;
            document.getElementById('followers-next').disabled = page >= totalPages;
        }

        async function changeFollowingPage(direction) {
            followingPage += direction;
            const userId = await getCurrentUserId();
            await showFollowingList(userId, followingPage);
        }

        async function changeFollowersPage(direction) {
            followersPage += direction;
            const userId = await getCurrentUserId();
            await showFollowersList(userId, followersPage);
        }

        async function deleteFollowing(toUserId) {
            try {
                const response = await fetch('/api/share/unfollow', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ to_user_id: toUserId }),
                });

                if (!response.ok) {
                    throw new Error('Failed to unfollow user');
                }

                const data = await response.json();
                alert(`${toUserId}님이 팔로잉 목록에서 삭제되었습니다.`);
            } catch (error) {
                console.error('Error unfollowing user:', error.message);
            }
        }

        async function deleteFollower(fromUserId) {
            try {
                const response = await fetch('/api/share/removeFollower', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ from_user_id: fromUserId }),
                });

                if (!response.ok) {
                    throw new Error('Failed to remove follower');
                }

                const data = await response.json();
                alert(`${fromUserId}님이 팔로워 목록에서 삭제되었습니다.`);
            } catch (error) {
                console.error('Error removing follower:', error.message);
            }
        }

        async function checkMutualFollow(currentUserId, targetUserId) {
            try {
                const response = await fetch(`/api/share/checkMutualFollow?currentUserId=${currentUserId}&targetUserId=${targetUserId}`);
                if (!response.ok) {
                    throw new Error('Failed to check mutual follow status');
                }
                const data = await response.json();
                return data.mutualFollow;
            } catch (error) {
                console.error('Error checking mutual follow status:', error.message);
                return false;
            }
        }

        function showTab(tabName) {
            const followingTab = document.getElementById('following-tab');
            const followersTab = document.getElementById('followers-tab');
            const followingContent = document.getElementById('following');
            const followersContent = document.getElementById('followers');

            if (tabName === 'following') {
                followingTab.classList.add('active');
                followersTab.classList.remove('active');
                followingContent.classList.add('active');
                followersContent.classList.remove('active');
            } else {
                followingTab.classList.remove('active');
                followersTab.classList.add('active');
                followingContent.classList.remove('active');
                followersContent.classList.add('active');
            }
        }
    </script>
</body>
</html>
